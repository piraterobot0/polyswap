// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {BaseHook} from "./forks/BaseHook.sol";
import {Hooks} from "v4-core/src/libraries/Hooks.sol";
import {IPoolManager} from "v4-core/src/interfaces/IPoolManager.sol";
import {IHooks} from "v4-core/src/interfaces/IHooks.sol";
import {PoolKey} from "v4-core/src/types/PoolKey.sol";
import {PoolId, PoolIdLibrary} from "v4-core/src/types/PoolId.sol";
import {BalanceDelta} from "v4-core/src/types/BalanceDelta.sol";
import {BeforeSwapDelta, toBeforeSwapDelta} from "v4-core/src/types/BeforeSwapDelta.sol";
import {Currency, CurrencyLibrary} from "v4-core/src/types/Currency.sol";
import {SafeCast} from "v4-core/src/libraries/SafeCast.sol";
import {IERC20} from "forge-std/interfaces/IERC20.sol";
import {ModifyLiquidityParams, SwapParams} from "v4-core/src/types/PoolOperation.sol";

/// @title Prediction Market Hook V2 - Flexible Constant Sum AMM
/// @notice Implements X + Y = K for binary prediction markets with flexible liquidity
/// @dev Improved version that accepts any amount of liquidity and works with SDK
contract PredictionMarketHookV2 is BaseHook {
    using PoolIdLibrary for PoolKey;
    using CurrencyLibrary for Currency;
    using SafeCast for uint256;

    // State variables for each pool
    mapping(PoolId => uint256) public totalLiquidity;
    mapping(PoolId => uint256) public token0Reserve;  // Renamed from yesReserve
    mapping(PoolId => uint256) public token1Reserve;  // Renamed from noReserve
    mapping(PoolId => uint256) public initialPrice0;  // Initial price for token0 (0-100)
    
    // Events
    event LiquidityAdded(PoolId indexed poolId, uint256 amount0, uint256 amount1, uint256 totalLiquidity);
    event SwapExecuted(PoolId indexed poolId, bool zeroForOne, uint256 amountIn, uint256 amountOut);
    event PoolInitialized(PoolId indexed poolId, uint256 initialPrice0, uint256 initialPrice1);

    uint256 constant SCALE = 1e18;
    uint256 constant PERCENT = 100;

    constructor(IPoolManager _poolManager) BaseHook(_poolManager) {}

    function getHookPermissions() public pure override returns (Hooks.Permissions memory) {
        return Hooks.Permissions({
            beforeInitialize: false,
            afterInitialize: true,    // Changed to true to initialize our state
            beforeAddLiquidity: true,
            afterAddLiquidity: false,
            beforeRemoveLiquidity: false,
            afterRemoveLiquidity: false,
            beforeSwap: true,
            afterSwap: false,
            beforeDonate: false,
            afterDonate: false,
            beforeSwapReturnDelta: true,
            afterSwapReturnDelta: false,
            afterAddLiquidityReturnDelta: false,
            afterRemoveLiquidityReturnDelta: false
        });
    }

    /// @notice Initialize pool with a specific price ratio
    /// @param key The pool key
    /// @param sqrtPriceX96 Initial sqrt price (ignored, we use our own pricing)
    /// @param tick Initial tick (ignored)
    function afterInitialize(
        address,
        PoolKey calldata key,
        uint160 sqrtPriceX96,
        int24 tick
    ) external override returns (bytes4) {
        PoolId poolId = key.toId();
        
        // Default to 50/50 if not set
        if (initialPrice0[poolId] == 0) {
            initialPrice0[poolId] = 50;  // 50% for token0
        }
        
        emit PoolInitialized(poolId, initialPrice0[poolId], PERCENT - initialPrice0[poolId]);
        return IHooks.afterInitialize.selector;
    }

    /// @notice Set initial price before pool initialization
    /// @param key The pool key
    /// @param price0Percent Initial price for token0 as percentage (0-100)
    function setInitialPrice(PoolKey calldata key, uint256 price0Percent) external {
        require(price0Percent <= PERCENT, "Invalid price");
        PoolId poolId = key.toId();
        require(totalLiquidity[poolId] == 0, "Pool already has liquidity");
        
        initialPrice0[poolId] = price0Percent;
    }

    /// @notice Add liquidity with any ratio of tokens
    /// @param key The pool key
    /// @param amount0 Amount of token0 to add
    /// @param amount1 Amount of token1 to add
    function addLiquidity(
        PoolKey calldata key,
        uint256 amount0,
        uint256 amount1
    ) external returns (uint256 liquidityAdded) {
        require(amount0 > 0 || amount1 > 0, "Must provide some tokens");
        
        PoolId poolId = key.toId();
        
        // Transfer tokens from sender to pool manager
        if (amount0 > 0) {
            IERC20(Currency.unwrap(key.currency0)).transferFrom(
                msg.sender,
                address(poolManager),
                amount0
            );
            poolManager.mint(address(this), key.currency0.toId(), amount0);
        }
        
        if (amount1 > 0) {
            IERC20(Currency.unwrap(key.currency1)).transferFrom(
                msg.sender,
                address(poolManager),
                amount1
            );
            poolManager.mint(address(this), key.currency1.toId(), amount1);
        }
        
        // Update reserves
        token0Reserve[poolId] += amount0;
        token1Reserve[poolId] += amount1;
        
        // Calculate total liquidity (constant sum)
        liquidityAdded = amount0 + amount1;
        totalLiquidity[poolId] += liquidityAdded;
        
        emit LiquidityAdded(poolId, amount0, amount1, totalLiquidity[poolId]);
        
        return liquidityAdded;
    }

    /// @notice Initialize pool with initial liquidity
    /// @param key The pool key
    /// @param totalAmount Total amount of liquidity (will be split based on initial price)
    /// @param useActualAmounts If true, expects sender to have the exact split amounts
    function initializeLiquidity(
        PoolKey calldata key,
        uint256 totalAmount,
        bool useActualAmounts
    ) external {
        PoolId poolId = key.toId();
        require(totalLiquidity[poolId] == 0, "Already has liquidity");
        require(totalAmount > 0, "Amount must be positive");
        
        uint256 price0 = initialPrice0[poolId];
        if (price0 == 0) price0 = 50; // Default to 50/50
        
        uint256 amount0;
        uint256 amount1;
        
        if (useActualAmounts) {
            // Caller provides the exact amounts they have
            uint256 balance0 = IERC20(Currency.unwrap(key.currency0)).balanceOf(msg.sender);
            uint256 balance1 = IERC20(Currency.unwrap(key.currency1)).balanceOf(msg.sender);
            
            amount0 = balance0 < totalAmount ? balance0 : totalAmount * price0 / PERCENT;
            amount1 = balance1 < totalAmount ? balance1 : totalAmount * (PERCENT - price0) / PERCENT;
        } else {
            // Split based on initial price ratio
            amount0 = totalAmount * price0 / PERCENT;
            amount1 = totalAmount * (PERCENT - price0) / PERCENT;
        }
        
        // Add the liquidity
        addLiquidity(key, amount0, amount1);
    }

    /// @notice Block regular V4 liquidity operations
    function beforeAddLiquidity(
        address,
        PoolKey calldata,
        ModifyLiquidityParams calldata,
        bytes calldata
    ) external pure override returns (bytes4) {
        revert("Use addLiquidity or initializeLiquidity instead");
    }

    /// @notice Handle swaps with constant sum formula
    function beforeSwap(
        address,
        PoolKey calldata key,
        SwapParams calldata params,
        bytes calldata
    ) external override returns (bytes4, BeforeSwapDelta, uint24) {
        PoolId poolId = key.toId();
        
        uint256 k = totalLiquidity[poolId];
        require(k > 0, "No liquidity");
        
        uint256 reserve0 = token0Reserve[poolId];
        uint256 reserve1 = token1Reserve[poolId];
        
        // Determine swap direction and calculate output
        uint256 amountIn = params.amountSpecified < 0 
            ? uint256(-params.amountSpecified) 
            : uint256(params.amountSpecified);
        
        uint256 amountOut;
        
        if (params.zeroForOne) {
            // Swapping token0 for token1
            require(amountIn <= reserve0, "Insufficient reserve0");
            // Constant sum: new_reserve0 + new_reserve1 = k
            // new_reserve0 = reserve0 + amountIn
            // new_reserve1 = k - new_reserve0
            uint256 newReserve0 = reserve0 + amountIn;
            uint256 newReserve1 = k - newReserve0;
            amountOut = reserve1 - newReserve1;
            
            // Update reserves
            token0Reserve[poolId] = newReserve0;
            token1Reserve[poolId] = newReserve1;
            
            // Mint and burn to handle the swap
            poolManager.mint(address(this), key.currency0.toId(), amountIn);
            poolManager.burn(address(this), key.currency1.toId(), amountOut);
        } else {
            // Swapping token1 for token0
            require(amountIn <= reserve1, "Insufficient reserve1");
            uint256 newReserve1 = reserve1 + amountIn;
            uint256 newReserve0 = k - newReserve1;
            amountOut = reserve0 - newReserve0;
            
            // Update reserves
            token0Reserve[poolId] = newReserve0;
            token1Reserve[poolId] = newReserve1;
            
            // Mint and burn to handle the swap
            poolManager.mint(address(this), key.currency1.toId(), amountIn);
            poolManager.burn(address(this), key.currency0.toId(), amountOut);
        }
        
        emit SwapExecuted(poolId, params.zeroForOne, amountIn, amountOut);
        
        // Return the delta
        BeforeSwapDelta delta = params.zeroForOne 
            ? toBeforeSwapDelta(amountIn.toInt128(), -(amountOut.toInt128()))
            : toBeforeSwapDelta(-(amountOut.toInt128()), amountIn.toInt128());
        
        return (IHooks.beforeSwap.selector, delta, 0);
    }

    /// @notice Get current price of tokens
    function getPrice(PoolKey calldata key) external view returns (uint256 price0, uint256 price1) {
        PoolId poolId = key.toId();
        uint256 k = totalLiquidity[poolId];
        
        if (k == 0) return (0, 0);
        
        // Price is the percentage of reserves
        price0 = (token0Reserve[poolId] * PERCENT) / k;
        price1 = (token1Reserve[poolId] * PERCENT) / k;
    }

    /// @notice Get pool reserves
    function getReserves(PoolKey calldata key) external view returns (uint256 reserve0, uint256 reserve1) {
        PoolId poolId = key.toId();
        return (token0Reserve[poolId], token1Reserve[poolId]);
    }

    /// @notice Get pool info
    function getPoolInfo(PoolKey calldata key) external view returns (
        uint256 liquidity,
        uint256 reserve0,
        uint256 reserve1,
        uint256 price0,
        uint256 price1
    ) {
        PoolId poolId = key.toId();
        liquidity = totalLiquidity[poolId];
        reserve0 = token0Reserve[poolId];
        reserve1 = token1Reserve[poolId];
        
        if (liquidity > 0) {
            price0 = (reserve0 * PERCENT) / liquidity;
            price1 = (reserve1 * PERCENT) / liquidity;
        }
    }
}